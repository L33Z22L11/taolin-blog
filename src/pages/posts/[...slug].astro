---
// 导入astro内容集合的定义
import type { CollectionEntry } from 'astro:content';
// 导入 MarkdownLayout 组件，这可能是用于渲染 Markdown 内容的布局组件。
import MarkdownLayout from '~/layouts/MarkdownLayout.astro';
// 导入 getPosts 函数，用于获取文章数据。
import { getPosts } from '~/utils/collection';

// 定义了 getStaticPaths 函数，用于生成静态页面的路径和属性。
export async function getStaticPaths() {
	// 使用 getPosts 函数获取所有文章，然后映射出每个文章的路径参数和属性。
	return (await getPosts(false,'asc')).map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}

// 定义了 Props 类型，它是 CollectionEntry 类型的一个实例，用于指定 posts 集合。
type Props = CollectionEntry<'posts'>;

// 从 Astro.props 获取传递给组件的属性。
const post = Astro.props;
// 设置 socialImage，优先使用文章数据中的 image.src，如果没有提供，则使用当前页面路径的 PNG 图像作为社交图像。
const socialImage = post.data.image?.src ?? `${Astro.url.pathname}.png`;
// 使用 post.render() 异步函数来渲染 Markdown 内容，并获取 Content 和 remarkPluginFrontmatter（frontmatter 数据）。
// 如果 date 或 lastmod 是字符串，将它们重新解析为 Date 对象。
// 设置 readingTime 属性，这个属性可能来自 frontmatter 中的 remarkPluginFrontmatter。
const { Content, remarkPluginFrontmatter } = await post.render();

// remarkPluginFrontmatter.date will be changed to string, so we parse it again.
if (typeof remarkPluginFrontmatter.date === 'string') {
	post.data.date = new Date(remarkPluginFrontmatter.date);
}
if (typeof remarkPluginFrontmatter.lastmod === 'string') {
	post.data.lastmod = new Date(remarkPluginFrontmatter.lastmod);
}
post.data.readingTime = remarkPluginFrontmatter.readingTime;
---

<MarkdownLayout {...post.data} socialImage={socialImage} currentNav="Blog">
	<Content />
</MarkdownLayout>
